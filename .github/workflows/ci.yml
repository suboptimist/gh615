name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python     
      #---------------------------------------------
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      #----------------------------------------------
      #  -----  install & configure poetry  -----      
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists      
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}  
      #----------------------------------------------
      # install dependencies if cache does not exist 
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required 
      #----------------------------------------------      
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suites   
      #----------------------------------------------
      - name: Check format with black
        run: |
          poetry run black . --check
      - name: Lint with flake8
        run: |
          poetry run flake8
      - name: Check import order with isort
        run: |
          poetry run isort . --check
      - name: Check with mypy
        run: |
          poetry run mypy .
      - name: Test with pytest
        run: |
          poetry run pytest
      #----------------------------------------------
      # Send coverage report to codecov   
      #----------------------------------------------
      - name: Transmit coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          verbose: true
